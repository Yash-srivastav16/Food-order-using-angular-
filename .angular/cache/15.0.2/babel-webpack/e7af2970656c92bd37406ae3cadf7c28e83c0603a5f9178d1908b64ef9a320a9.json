{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { Component, EventEmitter, ViewChild, Output, Input, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"starMain\"];\nlet RatingComponent = /*#__PURE__*/(() => {\n  let RatingComponent = class RatingComponent {\n    constructor() {}\n    ngOnInit() {}\n  };\n  RatingComponent.ɵfac = function RatingComponent_Factory(t) {\n    return new (t || RatingComponent)();\n  };\n  RatingComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: RatingComponent,\n    selectors: [[\"lib-rating\"]],\n    decls: 2,\n    vars: 0,\n    template: function RatingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"p\");\n        ɵngcc0.ɵɵtext(1, \" rating works! \");\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return RatingComponent;\n})();\nvar StarRatingComponent_1;\nlet StarRatingComponent = StarRatingComponent_1 = class StarRatingComponent {\n  constructor() {\n    this.stars = [];\n    this._readOnly = false;\n    this._totalStars = 5;\n    this.rate = new EventEmitter();\n    this.onStarsCountChange = new Subject();\n    this.onStarsCountChange.subscribe(() => {\n      this.setStars();\n      this.generateRating(true);\n      this.applySizeAllStars();\n      this.applyColorStyleAllStars(false);\n      this.addEvents();\n    });\n    this.onValueChange = new Subject();\n    this.onValueChange.subscribe(() => {\n      this.generateRating();\n      this.applySizeAllStars();\n    });\n    this.onCheckedColorChange = new Subject();\n    this.onCheckedColorChange.subscribe(() => {\n      this.applyColorStyleAllStars(true);\n    });\n    this.onUnCheckedColorChange = new Subject();\n    this.onUnCheckedColorChange.subscribe(() => {\n      this.applyColorStyleAllStars(false);\n    });\n    this.onSizeChange = new Subject();\n    this.onSizeChange.subscribe(() => {\n      this.applySizeAllStars();\n    });\n    this.onReadOnlyChange = new Subject();\n    this.onReadOnlyChange.subscribe(() => {\n      this.readonly ? this.makeReadOnly() : this.makeEditable();\n    });\n  }\n  get checkedcolor() {\n    return this._checkedColor;\n  }\n  get uncheckedcolor() {\n    return this._unCheckedColor;\n  }\n  get value() {\n    return this._value;\n  }\n  get size() {\n    return this._size.concat(!this._size.includes(\"px\") ? \"px\" : \"\");\n  }\n  get readonly() {\n    return String(this._readOnly) === \"true\";\n  }\n  get totalstars() {\n    return this._totalStars;\n  }\n  set checkedcolor(value) {\n    this._checkedColor = value;\n    this._checkedColor && this.onCheckedColorChange.next(this._checkedColor);\n  }\n  set uncheckedcolor(value) {\n    this._unCheckedColor = value;\n    this._unCheckedColor && this.onUnCheckedColorChange.next(this._unCheckedColor);\n  }\n  set value(value) {\n    value = !value || value == null ? 0 : value;\n    this._value = value;\n    this._value >= 0 && this.onValueChange.next(this._value);\n  }\n  set size(value) {\n    value = !value || value == null || value == \"0px\" ? \"24px\" : value;\n    this._size = value;\n    this.onSizeChange.next(this._size);\n  }\n  set readonly(value) {\n    this._readOnly = value;\n    this.onReadOnlyChange.next(value);\n  }\n  set totalstars(value) {\n    this._totalStars = value <= 0 ? 5 : Math.round(value);\n    this.onStarsCountChange.next(this._totalStars);\n  }\n  makeEditable() {\n    if (!this.mainElement) return;\n    this.mainElement.nativeElement.style.cursor = \"pointer\";\n    this.mainElement.nativeElement.title = this.value;\n    this.stars.forEach(star => {\n      star.style.cursor = \"pointer\";\n      star.title = star.dataset.index;\n    });\n  }\n  makeReadOnly() {\n    if (!this.mainElement) return;\n    this.mainElement.nativeElement.style.cursor = \"default\";\n    this.mainElement.nativeElement.title = this.value;\n    this.stars.forEach(star => {\n      star.style.cursor = \"default\";\n      star.title = \"\";\n    });\n  }\n  addEvents() {\n    if (!this.mainElement) return;\n    this.mainElement.nativeElement.addEventListener('mouseleave', this.offStar.bind(this));\n    this.mainElement.nativeElement.style.cursor = \"pointer\";\n    this.mainElement.nativeElement.title = this.value;\n    this.stars.forEach(star => {\n      star.addEventListener('click', this.onRate.bind(this));\n      star.addEventListener('mouseenter', this.onStar.bind(this));\n      star.style.cursor = \"pointer\";\n      star.title = star.dataset.index;\n    });\n  }\n  ngAfterViewInit() {}\n  onRate(event) {\n    if (this.readonly) return;\n    let star = event.srcElement;\n    let oldValue = this.value;\n    this.value = parseInt(star.dataset.index);\n    // if (this.value == 0) {\n    //   this.value = 1;\n    // }\n    let rateValues = {\n      oldValue: oldValue,\n      newValue: this.value,\n      starRating: this\n    };\n    this.rate.emit(rateValues);\n  }\n  onStar(event) {\n    if (this.readonly) return;\n    let star = event.srcElement;\n    let currentIndex = parseInt(star.dataset.index);\n    for (let index = 0; index < currentIndex; index++) {\n      this.stars[index].className = \"\";\n      this.addDefaultClass(this.stars[index]);\n      this.addCheckedStarClass(this.stars[index]);\n    }\n    for (let index = currentIndex; index < this.stars.length; index++) {\n      this.stars[index].className = \"\";\n      this.addDefaultClass(this.stars[index]);\n    }\n  }\n  offStar(event) {\n    this.generateRating();\n  }\n  addDefaultClass(star) {\n    star.classList.add(StarRatingComponent_1.CLS_DEFAULT_STAR);\n  }\n  addCheckedStarClass(star) {\n    star.classList.add(StarRatingComponent_1.CLS_CHECKED_STAR);\n  }\n  addHalfStarClass(star) {\n    star.classList.add(StarRatingComponent_1.CLS_HALF_STAR);\n  }\n  setStars() {\n    if (!this.mainElement) return;\n    let starContainer = this.mainElement.nativeElement;\n    let maxStars = [...Array(Number(this.totalstars)).keys()];\n    this.stars.length = 0;\n    starContainer.innerHTML = \"\";\n    maxStars.forEach(starNumber => {\n      let starElement = document.createElement(\"span\");\n      starElement.dataset.index = (starNumber + 1).toString();\n      starElement.title = starElement.dataset.index;\n      starContainer.appendChild(starElement);\n      this.stars.push(starElement);\n    });\n  }\n  applySizeAllStars() {\n    if (this._size) {\n      this.stars.length == 0 && this.setStars();\n      this.stars.forEach(star => {\n        let newSize = this.size.match(/\\d+/)[0];\n        let halfSize = parseInt(newSize) * 10 / 24;\n        let halfMargin = 0 - parseInt(newSize) * 20 / 24;\n        star.style.setProperty(StarRatingComponent_1.VAR_SIZE, this.size);\n        if (star.classList.contains(StarRatingComponent_1.CLS_HALF_STAR)) {\n          star.style.setProperty(StarRatingComponent_1.VAR_HALF_WIDTH, `${halfSize}px`);\n          star.style.setProperty(StarRatingComponent_1.VAR_HALF_MARGIN, `${halfMargin}px`);\n        }\n      });\n    }\n  }\n  applyColorStyleAllStars(setChecked) {\n    this.stars.length == 0 && this.setStars();\n    this.stars.forEach(star => {\n      if (setChecked) {\n        this.applyCheckedColorStyle(star);\n      } else {\n        this.applyUnCheckedColorStyle(star);\n      }\n    });\n  }\n  applyColorStyle(starElement) {\n    this.applyCheckedColorStyle(starElement);\n    this.applyUnCheckedColorStyle(starElement);\n  }\n  applyCheckedColorStyle(starElement) {\n    starElement.style.setProperty(StarRatingComponent_1.VAR_CHECKED_COLOR, this.checkedcolor);\n  }\n  applyUnCheckedColorStyle(starElement) {\n    starElement.style.setProperty(StarRatingComponent_1.VAR_UNCHECKED_COLOR, this.uncheckedcolor);\n  }\n  generateRating(forceGenerate = false) {\n    if (!this.mainElement) return;\n    if (this.readonly && !forceGenerate) return;\n    //if (this.value >= 0) {\n    this.stars.length == 0 && this.setStars();\n    this.mainElement.nativeElement.title = this.value;\n    let hasDecimals = (Number.parseFloat(this.value.toString()) % 1).toString().substring(3, 2) ? true : false;\n    let i = 1;\n    this.stars.forEach(star => {\n      star.className = \"\";\n      this.applyColorStyle(star);\n      this.addDefaultClass(star);\n      if (this.value >= i) {\n        // star on\n        this.addCheckedStarClass(star);\n      } else {\n        // half star\n        if (hasDecimals) {\n          this.addHalfStarClass(star);\n          hasDecimals = false;\n        }\n      }\n      i++;\n    });\n    //}\n  }\n};\n\nStarRatingComponent.ɵfac = function StarRatingComponent_Factory(t) {\n  return new (t || StarRatingComponent)();\n};\nStarRatingComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: StarRatingComponent,\n  selectors: [[\"star-rating\"]],\n  viewQuery: function StarRatingComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mainElement = _t.first);\n    }\n  },\n  inputs: {\n    checkedcolor: \"checkedcolor\",\n    uncheckedcolor: \"uncheckedcolor\",\n    value: \"value\",\n    size: \"size\",\n    readonly: \"readonly\",\n    totalstars: \"totalstars\"\n  },\n  outputs: {\n    rate: \"rate\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"starMain\", \"\"]],\n  template: function StarRatingComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  styles: [\":root{--checkedColor:gold;--unCheckedColor:gray;--size:24px;--halfWidth:10px;--halfMargin:-20px}.star{cursor:pointer;color:var(--unCheckedColor);font-size:var(--size);width:var(--size);display:inline-block}.star:last-child{margin-right:0}.star:before{content:'\\\\2605'}.star.on{color:var(--checkedColor)}.star.half:after{content:'\\\\2605';color:var(--checkedColor);position:absolute;margin-left:var(--halfMargin);width:var(--halfWidth);overflow:hidden}\"],\n  encapsulation: 3\n});\nStarRatingComponent.VAR_CHECKED_COLOR = '--checkedColor';\nStarRatingComponent.VAR_UNCHECKED_COLOR = '--unCheckedColor';\nStarRatingComponent.VAR_SIZE = '--size';\nStarRatingComponent.VAR_HALF_WIDTH = '--halfWidth';\nStarRatingComponent.VAR_HALF_MARGIN = '--halfMargin';\nStarRatingComponent.CLS_CHECKED_STAR = 'on';\nStarRatingComponent.CLS_DEFAULT_STAR = 'star';\nStarRatingComponent.CLS_HALF_STAR = 'half';\nStarRatingComponent.INP_CHECKED_COLOR = 'checkedcolor';\nStarRatingComponent.INP_UNCHECKED_COLOR = 'uncheckedcolor';\nStarRatingComponent.INP_VALUE = 'value';\nStarRatingComponent.INP_SIZE = 'size';\nStarRatingComponent.INP_READONLY = 'readonly';\nStarRatingComponent.INP_TOTALSTARS = 'totalstars';\n__decorate([ViewChild('starMain', {\n  static: true\n})], StarRatingComponent.prototype, \"mainElement\", void 0);\n__decorate([Output()], StarRatingComponent.prototype, \"rate\", void 0);\n__decorate([Input(StarRatingComponent_1.INP_CHECKED_COLOR)], StarRatingComponent.prototype, \"checkedcolor\", null);\n__decorate([Input(StarRatingComponent_1.INP_UNCHECKED_COLOR)], StarRatingComponent.prototype, \"uncheckedcolor\", null);\n__decorate([Input(StarRatingComponent_1.INP_VALUE)], StarRatingComponent.prototype, \"value\", null);\n__decorate([Input(StarRatingComponent_1.INP_SIZE)], StarRatingComponent.prototype, \"size\", null);\n__decorate([Input(StarRatingComponent_1.INP_READONLY)], StarRatingComponent.prototype, \"readonly\", null);\n__decorate([Input(StarRatingComponent_1.INP_TOTALSTARS)], StarRatingComponent.prototype, \"totalstars\", null);\nlet RatingModule = /*#__PURE__*/(() => {\n  let RatingModule = class RatingModule {\n    ngDoBootstrap() {}\n  };\n  RatingModule.ɵfac = function RatingModule_Factory(t) {\n    return new (t || RatingModule)();\n  };\n  RatingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: RatingModule\n  });\n  RatingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [FormsModule, CommonModule]\n  });\n  return RatingModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RatingModule, {\n    declarations: function () {\n      return [RatingComponent, StarRatingComponent];\n    },\n    imports: function () {\n      return [FormsModule, CommonModule];\n    },\n    exports: function () {\n      return [StarRatingComponent];\n    }\n  });\n})();\n\n/*\r\n * Public API Surface of rating\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { RatingModule, StarRatingComponent, RatingComponent as ɵa };\n\n//# sourceMappingURL=ng-starrating.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}